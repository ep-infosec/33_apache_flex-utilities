////////////////////////////////////////////////////////////////////////////////
//
//  Licensed to the Apache Software Foundation (ASF) under one or more
//  contributor license agreements.  See the NOTICE file distributed with
//  this work for additional information regarding copyright ownership.
//  The ASF licenses this file to You under the Apache License, Version 2.0
//  (the "License"); you may not use this file except in compliance with
//  the License.  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////
package com.adobe.cairngorm.work{   import mx.logging.ILogger;   import mx.logging.Log;      /**    * A work-flow that processes its children in sequence. The next child is    * started only when the previous child completes.    */    public class SequenceWorkFlow extends WorkFlow   {      //------------------------------------------------------------------------      //      //  Constants      //      //------------------------------------------------------------------------      private static const LOG : ILogger =          Log.getLogger( "com.adobe.cairngorm.work.SequenceWorkFlow" );               //------------------------------------------------------------------------      //      //  Private Variables      //      //------------------------------------------------------------------------      /** The index of the work-item currently processing. */      private var currentIndex : uint = 0;            //------------------------------------------------------------------------      //      //  Constructor      //      //------------------------------------------------------------------------      public function SequenceWorkFlow()      {         super();      }      //------------------------------------------------------------------------      //      //  Implementation : WorkItem      //      //------------------------------------------------------------------------      override protected function performWork() : void      {         if ( Log.isDebug() )         {            LOG.debug(                "Starting sequence work-flow: label={0}, children={1}, size={2}",               label,               children.length,               size );         }                  startNextWorkItem();      }            //------------------------------------------------------------------------      //      //  Overrides : WorkFlow      //      //------------------------------------------------------------------------      override protected function onChildWorkComplete( event : WorkEvent ) : void      {         super.onChildWorkComplete( event );         startNextWorkItem();      }            override protected function onChildWorkFault( event : WorkEvent ) : void      {         super.onChildWorkFault( event );         if ( Log.isError() )         {            LOG.error( "Fault during sequence work-flow: label={0}", label );         }         fault( event.message );      }      //------------------------------------------------------------------------      //      //  Private methods      //      //------------------------------------------------------------------------      private function startNextWorkItem() : void      {         if ( hasMoreWorkItems )         {            final var skipped : Boolean = processChild( getNextChild() ) == false;                        if ( skipped )            {               startNextWorkItem();            }          }         else         {            if ( Log.isDebug() )            {               LOG.debug( "Completed sequence work-flow: label={0}", label );            }            complete();         }      }      private function get hasMoreWorkItems() : Boolean      {         return children && currentIndex < children.length;      }      private function getNextChild() : IWorkItem      {         return children[ currentIndex++ ] as IWorkItem;      }   }}