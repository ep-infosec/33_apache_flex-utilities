<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:local="*"
			   viewSourceURL="srcview/index.html" initialize="loadSecurity();">

  <fx:Script>
    <![CDATA[
    import mx.collections.errors.ItemPendingError;
    import mx.rpc.AsyncResponder;
    import mx.rpc.AsyncToken;
    import mx.rpc.events.FaultEvent;
    import mx.rpc.events.ResultEvent;

    private var fetchedPages:Dictionary = new Dictionary();

    private function handleCreatePendingItemFunction(index:int, ipe:ItemPendingError):Object {
      var page:uint = Math.floor(index / pageSize);
      if (fetchedPages[page] == undefined)
      {
        // what if the request tries to get more data than is available?
        var numItemsToFetch:uint = pageSize;
        var startIndex:uint = pageSize * page;
        var endIndex:uint = startIndex + pageSize - 1;
        if (endIndex > items.length)
        {
          numItemsToFetch = items.length - startIndex;
        }
        var asyncToken:AsyncToken = ro.getElements(startIndex, numItemsToFetch);
        asyncToken.addResponder(new AsyncResponder(function result(event:ResultEvent, token:Object = null):void {
          for (var i:uint = 0; i < event.result.length; i++)
          {
            items.setItemAt(event.result[i], token + i);
          }
        }, function fault(event:FaultEvent, token:Object = null):void {
          trace(event.fault.faultString);
        }, startIndex));
        fetchedPages[page] = true;
      }
      return null;
    }
		
		private function loadSecurity():void 
		{
			Security.loadPolicyFile("http://www.jamesward.com/census2-tests/crossdomain.xml");
			ro.getElements(0, 500);
		}
    ]]>
  </fx:Script>
	

  <fx:Declarations>
    <fx:Number id="pageSize">100</fx:Number>
    <local:PagedList id="items" length="100000"/>
    <s:AsyncListView id="asyncListView" list="{items}" createPendingItemFunction="handleCreatePendingItemFunction"/>
    <s:RemoteObject id="ro" destination="census" endpoint="http://www.jamesward.com/census2-tests/messagebroker/amf"/>
  </fx:Declarations>

  <s:DataGrid dataProvider="{asyncListView}" width="100%" height="100%" variableRowHeight="false" lineBreak="explicit" selectionMode="none">
    <s:columns>
      <s:ArrayList>
        <s:GridColumn dataField="id"/>
        <s:GridColumn dataField="age"/>
        <s:GridColumn dataField="classOfWorker"/>
        <s:GridColumn dataField="education"/>
        <s:GridColumn dataField="maritalStatus"/>
        <s:GridColumn dataField="race"/>
        <s:GridColumn dataField="sex"/>
      </s:ArrayList>
    </s:columns>
  </s:DataGrid>

</s:Application>