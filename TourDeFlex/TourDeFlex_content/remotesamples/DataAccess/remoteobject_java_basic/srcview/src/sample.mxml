<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" backgroundGradientColors="[0x000000,0x323232]" viewSourceURL="srcview/index.html">
	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			
			[Bindable]
			private var mathResult:String;
			
			public function onResult(event:ResultEvent):void
			{
				mathResult = event.result as String;
			}
			public function onFault(event:FaultEvent):void
			{
				trace("Fault: " + event.fault.faultString);
			}
			
		]]>
	</mx:Script>
 	<!-- By default, the configuration of the channels and their endpoints to communicate with the server
         is read from services-config.xml and baked into the SWF *at compile time*. The problem is that
         the endpoints the application uses during development are typically different from the endpoints 
         the application uses in production. The ChannelSet API allows you to dynamically define your endpoints
         *at runtime*. In the example below, we hardcode the endpoint URLs in the AMFChannel definition. In real
         life, the client application would typically load these parameters dynamically. For example, the 
         client application could read these parameters from an XML file loaded using the HTTPService at startup. -->         
    <mx:ChannelSet id="channelSet">
        <mx:AMFChannel id="amfChannel" url="http://tourdeflex.adobe.com:8080/lcds-samples/messagebroker/amf" />
    </mx:ChannelSet>
    
    <!-- Using RemoteObject, you can directly invoke methods of Java objects (amongst others) deployed 
    	 in your application server. See the definition of the "userService" destination in remoting-config.xml -->
    <mx:RemoteObject id="myService" destination="userService" channelSet="{channelSet}"
    	result="onResult(event)" fault="onFault(event)"/> 
   
	
	<mx:Array id="operations">
		<mx:String>Add</mx:String>
		<mx:String>Subtract</mx:String>
		<mx:String>Multiply</mx:String>
		<mx:String>Divide</mx:String>
	</mx:Array>	

	<mx:Panel width="95%" height="100%" title="Simple Calculator" color="#000000">
    	<mx:Form id="myForm" width="100%" height="100%" label="Simple Calculator">
			<mx:FormItem label="Enter 1st number:">
				<mx:TextInput id="operand1" width="100"/>
			</mx:FormItem>
			<mx:FormItem label="Enter 2nd number:">
				<mx:TextInput id="operand2" width="100"/>
			</mx:FormItem>
			<mx:FormItem label="Select operation:">
				<mx:ComboBox id="operation" dataProvider="{operations}"/>
				<mx:Button label="Go!" click="{myService.getMathResult(operation.selectedItem,operand1.text,operand2.text)}"/>	
			</mx:FormItem>
			<mx:FormItem label="Result:" >
				<mx:TextInput width="100" text="{mathResult}"/>
			</mx:FormItem>
		</mx:Form>
	</mx:Panel>
</mx:Application>
