<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<!-- LiveCycle Data Services is required to use the approach described in this sample -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="*" layout="horizontal"
    backgroundGradientColors="[0x000000,0x323232]" creationComplete="init()" viewSourceURL="srcview/index.html">
    
    <mx:Script>
        <![CDATA[
        	import mx.collections.ArrayCollection;
        	import mx.rpc.AsyncToken;
        	import mx.rpc.events.FaultEvent;
        	
            import mx.utils.UIDUtil;
            import mx.utils.URLUtil;
            
            import mx.data.events.DataConflictEvent;
			import mx.data.Conflicts;
			import mx.data.Conflict;
        	
			import mx.controls.Alert;
            
			[Bindable]
    		private var uniqueId:String;
    		
			private function init():void
			{
		    	// The unique id is used to ensure the viewed sample is unique as part of the Tour de Flex framework only.
		    	// It is also passed in as a parameter to the server side so data from the database can be filtered per unique
		    	// id and users will see the results of their actions only.
				uniqueId = mx.core.Application.application.parameters.uid;
           		ds.fill(products,"by-uid",uniqueId);
         	}
			private function addItem():void
			{
				var p:Product = new Product();
				p.uniqueid=this.uniqueId;
				products.addItem(p);
				dg.selectedIndex = products.length - 1;
				product = dg.selectedItem as Product;
			}
    		private function deleteItem():void
			{
				ds.deleteItem(dg.selectedItem)
				ds.commit();
			}
						private function conflictHandler(event:DataConflictEvent):void
			{
				Alert.show("This product has been changed by someone else. The current state of the product has been reloaded.", "Conflict");
				var conflicts:Conflicts = ds.conflicts;
				var conflict:Conflict;
				for (var i:int=0; i<conflicts.length; i++)
				{
					conflict = conflicts.getItemAt(i) as Conflict;
					if (!conflict.resolved)
					{
						conflict.acceptServer();
					}
				}
			}
			private function faultHandler(event:FaultEvent):void
			{
				Alert.show(""+event);
			}
        ]]>
    </mx:Script>
	<mx:ArrayCollection id="products"/> 
   
    <mx:ChannelSet id="channelSet">
        <mx:RTMPChannel id="rtmpChannel" url="rtmp://tourdeflex.adobe.com:2037"/>
    </mx:ChannelSet>

    <!-- See the definition of the "product2" destination in data-management-config.xml -->
    <mx:DataService id="ds" destination="product2" channelSet="{channelSet}" autoCommit="false" 
    	conflict="conflictHandler(event)" fault="faultHandler(event)" autoSyncEnabled="false"/>
    	
    <Product id="product"
		name="{productName.text}"
		category="{category.text}"
		price="{Number(price.text)}"
		qtyInStock="{Number(qtyInStock.text)}"
		image="{image.text}"
		description="{description.text}"
		uniqueid="{this.uniqueId}"/>
		
    <mx:Panel title="Product Inventory" width="100%" height="100%" color="#000000">
	    <mx:DataGrid id="dg" dataProvider="{products}" width="100%" height="100%"
	         itemClick="{product=dg.selectedItem as Product}" editable="false">
	        <mx:columns>
	            <mx:DataGridColumn dataField="productId" headerText="Product Id"/>
	            <mx:DataGridColumn dataField="name" headerText="Name"/>
	            <mx:DataGridColumn dataField="category" headerText="Category" textAlign="right"/>
	            <mx:DataGridColumn dataField="price" headerText="Price" textAlign="right"/>
	            <mx:DataGridColumn dataField="qtyInStock" headerText="Qty" textAlign="right"/>
	        </mx:columns>
	    </mx:DataGrid>
	    <mx:ControlBar>
			<mx:Button label="+ Add Product" click="addItem()" enabled="{!ds.commitRequired}"/>
		</mx:ControlBar>
	</mx:Panel>
       
    <mx:Panel title="Product Details" width="100%" height="100%" color="#000000">
	    <mx:Form id="myForm" width="60%">
	        <mx:FormItem label="Name">
	            <mx:TextInput id="productName" text="{product.name}"/>
	        </mx:FormItem>
	        <mx:FormItem label="Category">
	            <mx:TextInput id="category" text="{product.category}"/>
	        </mx:FormItem>
	        <mx:FormItem label="Image">
				<mx:TextInput id="image" text="{product.image}" width="250"/>
			</mx:FormItem>
	        <mx:FormItem label="Price">
	            <mx:TextInput id="price" text="{isNaN(product.price)?'':product.price}"/>
	        </mx:FormItem>
	        <mx:FormItem label="Quantity in Stock">
	            <mx:TextInput id="qtyInStock" text="{product.qtyInStock}"/>
	        </mx:FormItem>
	        <mx:FormItem label="Description" width="100%">
	            <mx:TextArea id="description" text="{product.description}" width="100%" height="80"/>
	        </mx:FormItem>
	    </mx:Form>
        <mx:ControlBar>
				<mx:Button label="Delete" click="deleteItem()"
					enabled="{product.productId!=0}"/>
				<mx:Button label="Save" click="ds.commit()"
					enabled="{ds.commitRequired}"/>
				<mx:Button label="Cancel" click="ds.revertChanges()"
					enabled="{ds.commitRequired}"/>
		</mx:ControlBar>
    </mx:Panel>
</mx:Application>