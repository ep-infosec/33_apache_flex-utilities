<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
	backgroundGradientColors="[0x000000,0x323232]" color="0xFFFFFF" applicationComplete="init()">
	<mx:Script>
		<![CDATA[
			import mx.messaging.messages.AsyncMessage;
	    	import mx.messaging.messages.IMessage;
	    	import mx.collections.ArrayCollection;
	    	import mx.messaging.events.MessageEvent;
	    	import mx.rpc.events.ResultEvent;
	    	
	    	import mx.controls.Alert;
	    	            
	    	[Bindable]
		    private var companyAAC:ArrayCollection = new ArrayCollection( [
	        { Date: "25-Jul", Open: 40.75,  High: 40.75, Low: 40.24, Close:40.31},
	        { Date: "26-Jul", Open: 39.98,  High: 40.78, Low: 39.97, Close:40.34},
	        { Date: "27-Jul", Open: 40.38,  High: 40.66, Low: 40, Close:40.63},
	        { Date: "28-Jul", Open: 40.49,  High: 40.99, Low: 40.3, Close:40.98},
	        { Date: "29-Jul", Open: 40.13,  High: 40.4, Low: 39.65, Close:39.95},
	        { Date: "1-Aug", Open: 39.00,  High: 39.50, Low: 38.7, Close:38.6}, 
	        { Date: "2-Aug", Open: 38.68,  High: 39.34, Low: 37.75, Close:38.84}, 
	        { Date: "3-Aug", Open: 38.76,  High: 38.76, Low: 38.03, Close:38.12}, 
	        { Date: "4-Aug", Open: 37.98,  High: 37.98, Low: 36.56, Close:36.69},                       
	        { Date: "5-Aug", Open: 36.61,  High: 37, Low: 36.48, Close:36.86} ]);

			[Bindable]
	        private var companyBAC:ArrayCollection = new ArrayCollection( [
            { Date: "25-Jul", Open: 18.50,  High: 19, Low: 18.48, Close:18.86},
            { Date: "26-Jul", Open: 19.56,  High: 19.98, Low: 18.6, Close:18.69},                       
            { Date: "27-Jul", Open: 20.81,  High: 20.99, Low: 20.03, Close:20.12}, 
            { Date: "28-Jul", Open: 20.70,  High: 21.00, Low: 19.5, Close:20.84}, 
            { Date: "29-Jul", Open: 21.7,  High: 21.79, Low: 20.45, Close:20.6}, 
            { Date: "1-Aug", Open: 22.45,  High: 22.65, Low: 21.65, Close:21.95},
            { Date: "2-Aug", Open: 22.56,  High: 22.6, Low: 22.05, Close:22.98},
            { Date: "3-Aug", Open: 22.42,  High: 22.70, Low: 22.1, Close:22.63},
            { Date: "4-Aug", Open: 21.67,  High: 22.82, Low: 21.67, Close:22.34},
            { Date: "5-Aug", Open: 22.44,  High: 22.85, Low: 22.12, Close:22.31} ]);
            
            
    		private var uniqueId:String;
    		
			private function init():void
			{
				// The unique id is used to ensure the viewed sample is unique as part of the Tour de Flex framework only.
				uniqueId = mx.core.Application.application.parameters.uid;			   		
			    callLater(initMessaging);
            }
           
			
            private function initMessaging():void
            {
            	// Subscribe this user to their own unique topic id so they see their changes in both browsers
            	this.producer.subtopic = uniqueId;
            	this.consumer.subtopic = uniqueId;
            	this.consumer.subscribe();
            }
            
            private function handleDataChange():void
	    	{
	            var message: IMessage = new AsyncMessage();
	            if (compA.selected) {
	            	this.candlestickchart.dataProvider = this.companyAAC;
	            	message.body = "compA";
	            }
	            else {
	            	this.candlestickchart.dataProvider = this.companyBAC;
	            	message.body = "compB";
	            }
	            producer.send(message);
	       	}
	       	
	        private function messageHandler(event:MessageEvent):void
	    	{
	            var body:Object = event.message.body;
				if (body == "compA") {
					this.candlestickchart.dataProvider = this.companyAAC;
					this.compA.selected = true;
				}
				else {
					this.candlestickchart.dataProvider = this.companyBAC;
					this.compB.selected = true;	
				}
	    	}
		]]>
	</mx:Script>
	<!-- 
        By default, the configuration of the channels and their endpoints to communicate with the server
        is read from services-config.xml and baked into the SWF *at compile time*. The problem is that
        the endpoints the application uses during development are typically different from the endpoints 
        the application uses in production. The ChannelSet API allows you to dynamically define your endpoints
        *at runtime*. In the example below, we hardcode the endpoint URLs in the client application. In real
           life, the client application would typically load these parameters dynamically. For example, the 
        client application could read these parameters from an XML file loaded using the HTTPService at startup. 
    -->      
    <mx:ChannelSet id="channelSet">
        <!-- The first channel added to the channelSet, is the first channel that the system will use
             to try to communicate with the server. In this case, we choose RTMP as our preferred channel. 
             NOTE: the RTMP channel is only available in LCDS --> 
        <mx:RTMPChannel id="rtmpChannel" url="rtmp://tourdeflex.adobe.com:2037"/>
        <!-- If the RTMP connection fails (maybe because of a firewall), the system will try to communicate 
             with the second channel defined in the channelSet.
             In this case, we use an AMF streaming channel as the fall back channel.
             Note: You can add as many channels to a channelSet as you want. In a real-life app, it may
             be a good idea to add a traditional polling channel as the last resort. -->
        <mx:StreamingAMFChannel id="streamingAMFChannel" url="http://tourdeflex.adobe.com:8080/lcds-samples/messagebroker/streamingamf"/>
    </mx:ChannelSet>

	<!-- See the definition of the 'simple-collaboration' destination in the messaging-config.xml file snippet included -->
    <mx:Producer id="producer" destination="simple-collaboration" channelSet="{channelSet}"/>
    <mx:Consumer id="consumer" destination="simple-collaboration" message="messageHandler(event)" channelSet="{channelSet}"/>

	<mx:SeriesSlide id="slideIn" duration="1000" direction="up"/>
    <mx:SeriesSlide id="slideOut" duration="1000" direction="down"/>
    
    <mx:Panel title="Messaging Collaboration" layout="horizontal" color="0xffffff" borderAlpha="0.15" width="800" height="500"
         paddingTop="10" paddingRight="10" paddingBottom="10" paddingLeft="10" horizontalAlign="center">
         
         <mx:CandlestickChart id="candlestickchart" width="100%" height="100%" paddingRight="5" paddingLeft="5" color="0x323232"
            showDataTips="true" dataProvider="{companyAAC}" >
           
            <mx:verticalAxis>
                <mx:LinearAxis baseAtZero="false" />
            </mx:verticalAxis>

            <mx:horizontalAxis>
                <mx:CategoryAxis categoryField="Date" title="Date"/>
            </mx:horizontalAxis>
            
            <mx:series>
                <mx:CandlestickSeries  
                    openField="Open" highField="High" 
                    lowField="Low" closeField="Close"
                    showDataEffect="{slideIn}" 
                    hideDataEffect="{slideOut}">
		            <mx:fill>
		                <mx:SolidColor color="0xFF6600"/>
		            </mx:fill>
		            <mx:declineFill>
		                <mx:SolidColor color="0x333333"/>
		            </mx:declineFill>
		            <mx:stroke>
		                <mx:Stroke weight="1" color="black"/>
		            </mx:stroke>
				</mx:CandlestickSeries>
            </mx:series>
        </mx:CandlestickChart>
        
        <mx:VBox color="0x323232" width="30%" borderColor="0xDCDCDC" borderStyle="solid" height="100%"
            paddingLeft="5" paddingRight="0" paddingTop="5">
            
            <mx:Text color="0x0050AA" width="100%"
            text="Choose a company to view recent stock data."/>
            
            <mx:RadioButton id="compA" groupName="stocks" label="View Company A"
                selected="true" click="handleDataChange()"/>
            <mx:RadioButton id="compB" groupName="stocks" label="View Company B"
                click="handleDataChange()"/>
     
        </mx:VBox>
        
    </mx:Panel>
	   
</mx:Application>
