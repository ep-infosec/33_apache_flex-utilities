<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<!-- BlazeDS or LiveCycle Data Services is required to use the approach described in this sample -->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	backgroundGradientColors="[0x000000,0x323232]"	
	applicationComplete="init()" viewSourceURL="srcview/index.html">
	
	<mx:Script>
		<![CDATA[

			import mx.messaging.channels.StreamingAMFChannel;
			import mx.messaging.ChannelSet;
			import mx.messaging.channels.PollingChannel;
			import mx.messaging.channels.AMFChannel;
			import mx.messaging.channels.RTMPChannel;
			import mx.messaging.messages.AsyncMessage;
			import mx.messaging.messages.IMessage;

			private function init():void
			{
				//  By default, the configuration of the channels and their endpoints to communicate with the server
				//  is read from services-config.xml and baked into the SWF *at compile time*. The problem is that
				//  the endpoints the application uses during development are typically different from the endpoints 
				//  the application uses in production. The ChannelSet API allows you to dynamically define your endpoints
				//  *at runtime*. In the example below, we hardcode the endpoint URLs in the client application. In real
				//  life, the client application you would typically load these parameters dynamically. For example, the 
				//  client application could read these parameters from an XML file loaded using the HTTPService at startup.      
				var channelSet:ChannelSet = new ChannelSet();

				//	The first channel added to the channelSet, is the first channel that the system will use
				//	to try to communicate with the server. In this case, we choose RTMP as our preferred channel. 
				var rtmpChannel:RTMPChannel = new RTMPChannel("my-rtmp", "rtmp://pedemo.adobe.com:2037");
				channelSet.addChannel(rtmpChannel);

				//	If the RTMP connection fails (maybe because of a firewall), the system will try to communicate 
				//	with the second channel defined in the channelSet.
				//	In this case, we use an AMF streaming channel as the fall back channel.
				//	Note: You can add as many channels to a channelSet as you want. In a real-life app, it may
				//  be a good idea to add a traditional polling channel as the last resort.
				var streamingChannel:StreamingAMFChannel = new StreamingAMFChannel("my-streaming-amf", "http://pedemo.adobe.com:8080/lcds-samples/messagebroker/streamingamf");
				channelSet.addChannel(streamingChannel);
				
				//	Use the newly defined channelSet for both the producer and the consumer.
				producer.channelSet = channelSet;
				consumer.channelSet = channelSet;
				
				consumer.subscribe();
			}
		
			private function send():void
			{
				var message:IMessage = new AsyncMessage();
				message.body.chatMessage = msg.text;
				producer.send(message);
				msg.text = "";
			}
							
			private function messageHandler(message:IMessage):void
			{
				log.text += message.body.chatMessage + "\n";	
			}
			
		]]>
	</mx:Script>
	
	<!-- See the definition of the "chat" destination in messaging-config.xml -->
	<mx:Producer id="producer" destination="chat"/>
	<mx:Consumer id="consumer" destination="chat" message="messageHandler(event.message)"/>
	
	<mx:Panel title="Chat" width="100%" height="100%">
		<mx:TextArea id="log" width="100%" height="100%"/>
		<mx:ControlBar>
			 <mx:TextInput id="msg" width="100%" enter="send()"/>
			 <mx:Button label="Send" click="send()"/> 
		</mx:ControlBar>
	</mx:Panel>
	
</mx:Application>