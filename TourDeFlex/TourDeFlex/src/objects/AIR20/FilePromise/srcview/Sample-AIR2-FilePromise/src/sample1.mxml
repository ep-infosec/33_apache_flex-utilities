<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Module	xmlns:fx="http://ns.adobe.com/mxml/2009" 
			xmlns:s="library://ns.adobe.com/flex/spark" 
			xmlns:mx="library://ns.adobe.com/flex/mx"
			currentState="START_STATE" styleName="plain" 
			width="100%" height="100%" backgroundColor="0x000000" horizontalCenter="0">
	
	<!-- Based on this sample: http://www.riaspace.net/2010/01/file-promises-with-adobe-air-2-0/ -->
	
	<fx:Script>
		<![CDATA[
			import air.desktop.URLFilePromise;
			
			import flash.events.Event;
			import flash.events.MouseEvent;
			import flash.system.Capabilities;
			
			protected var filePromise:URLFilePromise;
			
			protected function imgAirIcon_mouseDownHandler(event:MouseEvent):void
			{
				// Instantiating new file promise
				filePromise = new URLFilePromise();
				// Registering OPEN event listener, to switch to 
				// DOWNLOAD_STATE when downloading starts
				filePromise.addEventListener(Event.OPEN, onOpen);
				
				// Setting URLRequest pointing to remote file
				filePromise.request = new URLRequest(fileUrl);
				// Setting relativePath with fileName to be saved locally
				filePromise.relativePath = fileName;
				
				// Array of promises with single promise in this case
				var promises:Array = new Array();
				promises.push(filePromise);
				
				// Instantiating clipboard object pointing to the promise
				var clipboard:Clipboard = new Clipboard();
				clipboard.setData(ClipboardFormats.FILE_PROMISE_LIST_FORMAT, promises);
				
				// Dragging with NativeDragManager
				NativeDragManager.doDrag(imgAirIcon, clipboard);
			}
			
			protected function onOpen(event:Event):void
			{
				currentState = "DOWNLOAD_STATE";
				prgBar.source = filePromise;
			}
			
			protected function get fileUrl():String
			{
				// Returns remote file URL based on current operating system
				if (Capabilities.os.search(/mac/i) > -1)
					return "http://airdownload.adobe.com/air/mac/download/latest/AdobeAIR.dmg";
				else if (Capabilities.os.search(/win/i) > -1)
					return "http://airdownload.adobe.com/air/win/download/latest/AdobeAIRInstaller.exe";
				else 
					return "http://airdownload.adobe.com/air/lin/download/latest/AdobeAIRInstaller.bin";
			}
			
			protected function get fileName():String
			{
				var fileUrl:String = fileUrl;
				return fileUrl.slice(fileUrl.lastIndexOf("/") + 1);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:State name="START_STATE"/>
		<s:State name="DOWNLOAD_STATE"/>
	</fx:Declarations>
	
	<s:VGroup paddingLeft="100" paddingTop="50" horizontalAlign="center" gap="15">
		<mx:Image id="imgAirIcon" source="@Embed(source='adobe_air_logo.png')" mouseDown="imgAirIcon_mouseDownHandler(event)" toolTip="{fileUrl}" />
		<s:Label text="(Drag out the icon to begin Adobe AIR download)" color="0xFFFFFF"/>
		<mx:ProgressBar id="prgBar" bottom="10" horizontalCenter="0"  visible="false" visible.DOWNLOAD_STATE="true" 
						label="Downloading {int(prgBar.percentComplete)}%" color="0xFFFFFF"/>
	</s:VGroup>
		
</mx:Module>