<?xml version="1.0" encoding="utf-8"?>
<!--

  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

-->
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   styleName="plain" width="100%" height="100%" creationComplete="init()">
	<fx:Script>
		<![CDATA[
			import flash.events.StorageVolumeChangeEvent;
			import mx.controls.Alert;
			
			[Bindable]
			private var rootDir:File;
			
			[Bindable]
			private var path:String;
			
			private function init():void
			{
				if (StorageVolumeInfo.isSupported)
				{
					StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_MOUNT, onVolumeMount);
					StorageVolumeInfo.storageVolumeInfo.addEventListener(StorageVolumeChangeEvent.STORAGE_VOLUME_UNMOUNT, onVolumeUnmount);
				}
				else Alert.show("AIR 2 storage detection is not supported.");
			}
			
			private function onVolumeMount(e:StorageVolumeChangeEvent):void
			{
				this.deviceName.text = e.storageVolume.name;
				this.fileSystemType.text = e.storageVolume.fileSystemType;
				this.isRemovable.selected = e.storageVolume.isRemovable;
				this.isWritable.selected = e.storageVolume.isWritable;
				rootDir = e.storageVolume.rootDirectory;
				path = rootDir.nativePath;
			}
			
			private function onVolumeUnmount(e:StorageVolumeChangeEvent):void
			{
				trace("Storage Volume unmount.");
			}
			
			private function fileGridHandler(event:MouseEvent):void
			{
				var fsg:FileSystemDataGrid = event.currentTarget as FileSystemDataGrid;
				if (fsg.selectedItem != null)
					(fsg.selectedItem as File).openWithDefaultApplication();
			}
		]]>
	</fx:Script>
	
	<s:Panel width="100%" height="100%" horizontalCenter="0"
			 title="Mass Storage Device Detection Sample" skinClass="skins.TDFPanelSkin">
		
		<s:layout>
			<s:VerticalLayout paddingLeft="7" paddingTop="7" paddingBottom="7" paddingRight="7"/>
		</s:layout>
		
		<s:HGroup verticalAlign="middle">
			<s:Label text="Storage Volume Info" fontSize="14" fontWeight="bold"/>
			<mx:Spacer width="70"/>
			<s:Label text="Plug in a storage device to detect general information and contents of the device."/>
		</s:HGroup>
		<s:HGroup verticalAlign="middle">
			<s:Label text="Name:"/>
			<s:Label id="deviceName" color="0x336699"/>
			<s:Label text="File System Type:"/>
			<s:Label id="fileSystemType" color="0x336699"/>
		</s:HGroup>
		
		<s:Label text="Contents of {path}" fontWeight="bold"/>
		
		<mx:FileSystemDataGrid id="fileGrid" width="660" height="100" directory="{rootDir}" 
							   doubleClickEnabled="true" doubleClick="fileGridHandler(event)">
		</mx:FileSystemDataGrid>
		<s:HGroup right="20">
			<mx:Button icon="@Embed(source='up.png')" click="fileGrid.navigateUp();"
					   enabled="{fileGrid.canNavigateUp}"/>
			<mx:Spacer width="330"/>
			<s:CheckBox id="isRemovable" label="Removable Device?" enabled="false"/>
			<s:CheckBox id="isWritable" label="Writable Device?" enabled="false"/>	
		</s:HGroup>	
	</s:Panel>
	
</mx:Module>
